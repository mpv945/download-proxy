name: JavaÊú¨Âú∞ÂéüÁîüÂ∫îÁî®ÂºÄÂèëÁºñËØëÂíåÈÉ®ÁΩ≤
run-name: ${{ github.actor }} GitHub Actions üöÄ
on:
  push:
    branches:
      - main
    # tags: [ 'v*.*.*' ]  # Â¶Ç v1.0.0 ‰ºöËß¶ÂèëÊûÑÂª∫
jobs:
  init-job:
    runs-on: ubuntu-latest
    outputs:
      build-time: ${{ steps.set.outputs.build-time }}
    steps:
      - id: set
        run: echo "build-time=$(TZ='Asia/Shanghai' date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"
  build-matrix-os:
    needs: init-job
    runs-on: ${{ matrix.os }} # Á≥ªÁªüosÈÄâÊã©Ôºöhttps://github.com/actions/runner-images?tab=readme-ov-file
    env:
      BUILD_DATETIME: ${{ needs.init-job.outputs.build-time }}
    strategy:
      matrix:
        # platform: [linux/amd64, linux/arm64, darwin/amd64, darwin/arm64, windows/amd64]
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-latest, macos-13, windows-latest] # ËãπÊûúarmÊî∂Ë¥πÔºömacos-15-xlarge,
        java: [24]
    name: Build native image for ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4 # https://github.com/actions/setup-java
        with:
          distribution: 'graalvm' # See 'Supported distributions' for available options
          java-version: ${{ matrix.java }}
          # check-latest: true
          cache: "maven"
          cache-dependency-path: 'pom.xml'
      - name: Extract Project Name and Version
        shell: bash
        run: |
          ARTIFACT_ID=$(mvn help:evaluate -q -DforceStdout -Dexpression=project.artifactId)
          VERSION=$(mvn help:evaluate -q -DforceStdout -Dexpression=project.version)
          echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Normalize OS Name
        shell: bash
        run: |
          OS_NAME=$(java -XshowSettings:properties -version 2>&1 | grep "os.name" | awk -F' = ' '{print $2}' | tr '[:upper:]' '[:lower:]' | sed 's/ //g')
          if [[ "$OS_NAME" =~ windows ]]; then
            OS_CLASSIFIER="windows"
          elif [[ "$OS_NAME" =~ macos|darwin ]]; then
            OS_CLASSIFIER="macos"
          else
            OS_CLASSIFIER="linux"
          fi
          echo "OS_CLASSIFIER=$OS_CLASSIFIER" >> $GITHUB_ENV
          OS_ARCH=$(java -XshowSettings:properties -version 2>&1 | grep "os.arch" | awk -F' = ' '{print $2}')
          echo "OS_ARCH=$OS_ARCH" >> $GITHUB_ENV
      - name: Print Java Info
        shell: bash
        run: |
          java -version
          mvn --version
          mvn -Dspring-boot.build-image.imageName=${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }} -DfinalName=${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }} -Dnative.imageName=${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }} -Dmaven.test.skip=true -Pnative native:compile
          ls -alh target/
          echo ${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
          if [[ ! "$OS_NAME" =~ windows ]]; then
            chmod +x target/${{ env.ARTIFACT_ID }}
          fi
          mkdir artifact
          cp target/${{ env.ARTIFACT_ID }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          cp target/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}.jar artifact/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}.jar
          ls -lah artifact/
      - name: install upx
        #if: "!contains(matrix.os, windows)"
        shell: bash
        # shell: ${{ matrix.os == 'windows-latest' && 'cmd' || 'bash' }}
        run: |
          ls -lah artifact/
          if [[ "${{ matrix.os }}" =~ windows ]]; then
            echo "choco install maven -y"
            choco install upx -y
            upx --best --lzma artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
            # upx --ultra-brute --lzma --all-methods --all-filters artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} -o  artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}-mini${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          elif [[ "${{ matrix.os }}" =~ macos ]]; then
            echo "brew install maven"
            # brew install upx ÔºàApple ÁöÑ ‰ª£Á†ÅÁ≠æÂêçÊú∫Âà∂ ‰∏é ÂèØÊâßË°åÊñá‰ª∂ÁªìÊûÑ ‰∏çÂÖºÂÆπ UPX ÁöÑ‰øÆÊîπ„ÄÇÔºâ
            # upx --best --lzma --all-filters artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
          else
            echo "apt install -y maven"
            sudo apt install -y xz-utils upx
            upx --best --lzma --all-filters artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
            docker build -f Dockerfile --build-arg APP_FILE=./artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }} -t "${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}:$BUILD_DATETIME" .
            # Â∏∏Áî®ÂéãÁº©Ôºöxz -T0 -zÔºõÂØºÂÖ•Ôºöxz -dc < ubuntu_latest.tar.xz | docker load
            docker save "${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}:$BUILD_DATETIME" | xz -T0 -9e -zc - > "artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}_$BUILD_DATETIME.tar.xz"
          fi
          ls -lah artifact/
      - name: Upload Native Executable
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
          path: artifact/*
  deploy-releases:
    runs-on: ubuntu-latest
    needs: [build-matrix-os]
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      # 1. Ê£ÄÂá∫‰ª£Á†Å
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. ÊèêÂèñÈ°πÁõÆÂêçÂíåÁâàÊú¨
      - name: Extract Project Name and Version
        shell: bash
        run: |
          ARTIFACT_ID=$(mvn help:evaluate -q -DforceStdout -Dexpression=project.artifactId)
          echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
      # 3. ‰∏ãËΩΩÊâÄÊúâ Artifacts
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          pattern: artifact-${{ env.ARTIFACT_ID }}-*
          merge-multiple: true
      # 4. ÂàóÂá∫‰∏ãËΩΩÁöÑÊñá‰ª∂ÔºàË∞ÉËØïÔºâ
      - name: List Downloaded Files
        run: ls -lRh artifacts/
      # 5. ÂàõÂª∫ GitHub Release Âπ∂‰∏ä‰º† Artifacts
      - name: Create Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        #if: startsWith(github.ref, 'refs/tags/') # ‰ªÖÂú®tagÊó∂‰∏ä‰º†
        with:
          tag_name: v${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: Automated release for ${{ env.ARTIFACT_ID }} v${{ env.VERSION }} with UPX compression
          files: |
            artifacts/native-windows-x86_64/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-windows-x86_64.exe
            artifacts/native-linux-x86_64/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-linux-x86_64
            artifacts/native-macos-x86_64/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-macos-x86_64
            artifacts/native-macos-aarch64/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-macos-aarch64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}