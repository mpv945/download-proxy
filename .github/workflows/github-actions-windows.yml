name: windowsÂπ≥Âè∞
run-name: ${{ github.actor }} GitHub Actions üöÄ
on:
  push:
    branches:
      - main
    # tags: [ 'v*.*.*' ]  # Â¶Ç v1.0.0 ‰ºöËß¶ÂèëÊûÑÂª∫
jobs:
  build-native:
    runs-on: ${{ matrix.os }} # Á≥ªÁªüosÈÄâÊã©Ôºöhttps://github.com/actions/runner-images?tab=readme-ov-file
    strategy:
      matrix:
        # platform: [linux/amd64, linux/arm64, darwin/amd64, darwin/arm64, windows/amd64]
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-latest, macos-13, windows-latest] # ËãπÊûúarmÊî∂Ë¥πÔºömacos-15-xlarge,
        java: [24]
    name: Build native image for ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4 # https://github.com/actions/setup-java
        with:
          distribution: 'graalvm' # See 'Supported distributions' for available options
          java-version: ${{ matrix.java }}
          # check-latest: true
          cache: "maven"
          cache-dependency-path: 'pom.xml'
      - name: Extract Project Name and Version
        shell: bash
        run: |
          ARTIFACT_ID=$(mvn help:evaluate -q -DforceStdout -Dexpression=project.artifactId)
          VERSION=$(mvn help:evaluate -q -DforceStdout -Dexpression=project.version)
          echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Normalize OS Name
        shell: bash
        run: |
          OS_NAME=$(java -XshowSettings:properties -version 2>&1 | grep "os.name" | awk -F' = ' '{print $2}' | tr '[:upper:]' '[:lower:]' | sed 's/ //g')
          if [[ "$OS_NAME" =~ windows ]]; then
            OS_CLASSIFIER="windows"
          elif [[ "$OS_NAME" =~ macos|darwin ]]; then
            OS_CLASSIFIER="macos"
          else
            OS_CLASSIFIER="linux"
          fi
          echo "OS_CLASSIFIER=$OS_CLASSIFIER" >> $GITHUB_ENV
          OS_ARCH=$(java -XshowSettings:properties -version 2>&1 | grep "os.arch" | awk -F' = ' '{print $2}')
          echo "OS_ARCH=$OS_ARCH" >> $GITHUB_ENV
      - name: Print Java Info
        shell: bash
        run: |
          java -version
          mvn --version
          mvn -Dspring-boot.build-image.imageName=${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }} -DfinalName=${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }} -Dnative.imageName=${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }} -Dmaven.test.skip=true -Pnative native:compile
          ls -alh target/
          echo ${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
          if [[ ! "$OS_NAME" =~ windows ]]; then
            chmod +x target/${{ env.ARTIFACT_ID }}
          fi
          mkdir artifact
          cp target/${{ env.ARTIFACT_ID }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          cp target/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}.jar artifact/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}.jar
          ls -lah artifact/
      - name: install upx
        #if: "!contains(matrix.os, windows)"
        shell: bash
        # shell: ${{ matrix.os == 'windows-latest' && 'cmd' || 'bash' }}
        run: |
          ls -lah artifact/
          if [[ "${{ matrix.os }}" =~ windows ]]; then
            echo "choco install maven -y"
            choco install upx -y
            upx --best --lzma --strip-relocs=1 artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
            upx --ultra-brute --lzma --all-methods --all-filters --strip-relocs=1 artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} -o  artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}-mini${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          elif [[ "${{ matrix.os }}" =~ macos ]]; then
            echo "brew install maven"
            # brew install upx ÔºàApple ÁöÑ ‰ª£Á†ÅÁ≠æÂêçÊú∫Âà∂ ‰∏é ÂèØÊâßË°åÊñá‰ª∂ÁªìÊûÑ ‰∏çÂÖºÂÆπ UPX ÁöÑ‰øÆÊîπ„ÄÇÔºâ
            # upx --best --lzma --all-filters artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
          else
            echo "apt install -y maven"
            sudo apt install upx
            upx --best --lzma --all-filters artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
          fi
          ls -lah artifact/
      - name: Upload Native Executable
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
          path: artifact/*