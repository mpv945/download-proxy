name: JavaÊú¨Âú∞ÂéüÁîüÂ∫îÁî®ÂºÄÂèëÁºñËØëÂíåÈÉ®ÁΩ≤
run-name: ${{ github.actor }} GitHub Actions üöÄ
on:
  push:
    branches:
      - main
    tags: [ 'v*.*.*' ]  # Â¶Ç v1.0.0 ‰ºöËß¶ÂèëÊûÑÂª∫
jobs:
  init-job:
    runs-on: ubuntu-latest
    outputs:
      build-time: ${{ steps.set.outputs.build-time }}
      is_build: ${{ steps.build-flag.outputs.is_build }}
    steps:
      - id: set
        run: echo "build-time=$(TZ='Asia/Shanghai' date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"
      - name: Checkout source
        uses: actions/checkout@v4
      - name: get commit msg
        id: get-msg
        if: github.event_name == 'push'
        run: |
          commit_body=$(git log -1 --pretty=format:"%b")
          if [[ "$commit_body" =~ "ÂèëÂ∏ÉÁîü‰∫ß" ]]; then
            echo 'ÂåÖÂê´: if echo "$string1" | grep -q "$string2"; then'
            # exit 0
            echo "is_build_tmp=true" >> $GITHUB_OUTPUT
          else
            echo "‰∏çÂåÖÂê´"
            # exit 1
            echo "is_build_tmp=false" >> $GITHUB_OUTPUT
          fi
      - name: Step 2 (fallback setter)
        id: build-flag
        run: |
          echo "is_build=${{ steps.get-msg.outputs.is_build_tmp || 'true' }}" >> $GITHUB_OUTPUT
  build-matrix-os:
    needs: init-job
    runs-on: ${{ matrix.os }} # Á≥ªÁªüosÈÄâÊã©Ôºöhttps://github.com/actions/runner-images?tab=readme-ov-file
    if: ${{ needs.init-job.outputs.is_build == 'true' }}
    env:
      BUILD_DATETIME: ${{ needs.init-job.outputs.build-time }}
    outputs: # ‰∫åÊ¨°‰º†ÈÄíË∑®job
      build-time: ${{ needs.init-job.outputs.build-time }}
    strategy:
      matrix:
        # platform: [linux/amd64, linux/arm64, darwin/amd64, darwin/arm64, windows/amd64]
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-latest, macos-13, windows-latest] # ËãπÊûúarmÊî∂Ë¥πÔºömacos-15-xlarge,
        java: [24]
    name: Build native image for ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Set up Java ${{ matrix.os }}
        uses: actions/setup-java@v4 # https://github.com/actions/setup-java
        with:
          distribution: 'graalvm' # See 'Supported distributions' for available options
          java-version: ${{ matrix.java }}
          # check-latest: true
          cache: "maven"
          cache-dependency-path: 'pom.xml'
      - name: Extract Project Name and Version ${{ matrix.os }}
        shell: bash
        run: |
          ARTIFACT_ID=$(mvn help:evaluate -q -DforceStdout -Dexpression=project.artifactId)
          VERSION=$(mvn help:evaluate -q -DforceStdout -Dexpression=project.version)
          echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Normalize OS Name ${{ matrix.os }}
        shell: bash
        run: |
          OS_NAME=$(java -XshowSettings:properties -version 2>&1 | grep "os.name" | awk -F' = ' '{print $2}' | tr '[:upper:]' '[:lower:]' | sed 's/ //g')
          if [[ "$OS_NAME" =~ windows ]]; then
            OS_CLASSIFIER="windows"
          elif [[ "$OS_NAME" =~ macos|darwin ]]; then
            OS_CLASSIFIER="macos"
          else
            OS_CLASSIFIER="linux"
          fi
          echo "OS_CLASSIFIER=$OS_CLASSIFIER" >> $GITHUB_ENV
          OS_ARCH=$(java -XshowSettings:properties -version 2>&1 | grep "os.arch" | awk -F' = ' '{print $2}')
          echo "OS_ARCH=$OS_ARCH" >> $GITHUB_ENV
      - name: Print Java Info ${{ matrix.os }}
        shell: bash
        run: |
          java -version
          mvn --version
          mvn -Dspring-boot.build-image.imageName=${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }} -DfinalName=${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }} -Dnative.imageName=${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }} -Dmaven.test.skip=true -Pnative native:compile
          ls -alh target/
          echo ${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
          if [[ ! "$OS_NAME" =~ windows ]]; then
            chmod +x target/${{ env.ARTIFACT_ID }}
          fi
          mkdir artifact
          cp target/${{ env.ARTIFACT_ID }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          cp target/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}.jar artifact/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}.jar
          ls -lah artifact/
      - name: install upx ${{ matrix.os }}
        #if: "!contains(matrix.os, windows)"
        shell: bash
        # shell: ${{ matrix.os == 'windows-latest' && 'cmd' || 'bash' }}
        run: |
          ls -lah artifact/
          if [[ "${{ matrix.os }}" =~ windows ]]; then
            echo "choco install maven -y"
            choco install upx -y
            upx --best --lzma artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
            # upx --ultra-brute --lzma --all-methods --all-filters artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} -o  artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}-mini${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          elif [[ "${{ matrix.os }}" =~ macos ]]; then
            echo "brew install maven"
            # brew install upx ÔºàApple ÁöÑ ‰ª£Á†ÅÁ≠æÂêçÊú∫Âà∂ ‰∏é ÂèØÊâßË°åÊñá‰ª∂ÁªìÊûÑ ‰∏çÂÖºÂÆπ UPX ÁöÑ‰øÆÊîπ„ÄÇÔºâ
            # upx --best --lzma --all-filters artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
          else
            echo "apt install -y maven"
            sudo apt update && sudo apt install -y xz-utils upx
            upx --best --lzma --all-filters artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
            docker build -f Dockerfile --build-arg APP_FILE=./artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }} -t "${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}:$BUILD_DATETIME" .
            # Â∏∏Áî®ÂéãÁº©Ôºöxz -T0 -zÔºõÂØºÂÖ•Ôºöxz -dc < ubuntu_latest.tar.xz | docker load Êàñ docker save -o fedora-latest.tar fedora:latest
            # docker save "${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}:$BUILD_DATETIME" | xz -T0 -9e -zc - > "artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}_$BUILD_DATETIME.tar.xz"
            docker save "${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}:$BUILD_DATETIME" | gzip > "artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}_$BUILD_DATETIME.tar.gz"
          fi
          ls -lah artifact/
      - name: Upload Native Executable ${{ matrix.os }}
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
          path: artifact/*
  build-matrix-os-musl:
    needs: init-job
    if: ${{ needs.init-job.outputs.is_build == 'true' }}
    runs-on: ${{ matrix.os }} # Á≥ªÁªüosÈÄâÊã©Ôºöhttps://github.com/actions/runner-images?tab=readme-ov-file
    env:
      BUILD_DATETIME: ${{ needs.init-job.outputs.build-time }}
    outputs: # ‰∫åÊ¨°‰º†ÈÄíË∑®job
      build-time: ${{ needs.init-job.outputs.build-time }}
    strategy:
      matrix:
        os: [ubuntu-latest] # armÊû∂ÊûÑÂØπmuslÊîØÊåÅÂæàÂ∑Æ, ubuntu-24.04-arm
        java: [24]
    name: Build native image for ${{ matrix.platform }} -musl
    steps:
      - name: Checkout source ${{ matrix.os }} -musl
        uses: actions/checkout@v4
      - name: Set up Java ${{ matrix.os }} -musl
        uses: actions/setup-java@v4 # https://github.com/actions/setup-java
        with:
          distribution: 'graalvm' # See 'Supported distributions' for available options
          java-version: ${{ matrix.java }}
          cache: "maven"
          cache-dependency-path: 'pom.xml'
      - name: Build native image in Docker (musl) ${{ matrix.java }} -musl
        run: |
          sudo apt update && sudo apt install -y musl musl-dev musl-tools
          sudo apt install -y xz-utils upx
      - name: Extract Project Name and Version ${{ matrix.java }} -musl
        shell: bash
        run: |
          ARTIFACT_ID=$(mvn help:evaluate -q -DforceStdout -Dexpression=project.artifactId)
          VERSION=$(mvn help:evaluate -q -DforceStdout -Dexpression=project.version)
          echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Normalize OS Name ${{ matrix.java }} -musl
        shell: bash
        run: |
          OS_NAME=$(java -XshowSettings:properties -version 2>&1 | grep "os.name" | awk -F' = ' '{print $2}' | tr '[:upper:]' '[:lower:]' | sed 's/ //g')
          if [[ "$OS_NAME" =~ windows ]]; then
            OS_CLASSIFIER="windows"
          elif [[ "$OS_NAME" =~ macos|darwin ]]; then
            OS_CLASSIFIER="macos"
          else
            OS_CLASSIFIER="linux"
          fi
          echo "OS_CLASSIFIER=$OS_CLASSIFIER" >> $GITHUB_ENV
          OS_ARCH=$(java -XshowSettings:properties -version 2>&1 | grep "os.arch" | awk -F' = ' '{print $2}')
          echo "OS_ARCH=$OS_ARCH" >> $GITHUB_ENV
      - name: Print Java Info ${{ matrix.java }} -musl
        shell: bash
        run: |
          java -version
          mvn --version
          sudo ln -s /usr/bin/musl-gcc /usr/local/bin/x86_64-linux-musl-gcc
          # mvn -Dnative-image.args=" --static --libc=musl " -Dmaven.test.skip=true -Pnative native:compile
          # mvn -Dnative-image.buildArgs="--static,--libc=musl,-H:+UseSerialGC,-R:MaxHeapSize=512m" -Dmaven.test.skip=true -Pnative native:compile
          # mvn -Dnative-image.buildArgs="--static,--libc=musl,-H:+UseG1GC" -Dmaven.test.skip=true -Pnative native:compile
          sed 's|<buildArg>--no-fallback</buildArg>|<buildArg>--no-fallback</buildArg><buildArg>--static</buildArg><buildArg>--libc=musl</buildArg>|' pom.xml > pom-native.xml
          # cat pom-native.xml
          # mvn -f pom-native.xml -Dnative-image.args=" --static --libc=musl " -Dmaven.test.skip=true -Pnative native:compile
          docker run --rm \
            --entrypoint /bin/bash \
            -v $PWD:/app \
            -w /app \
            ghcr.io/graalvm/native-image-community:24-muslib \
            -c "chmod +x ./mvnw && ./mvnw -f pom-native.xml -Dmaven.test.skip=true -Pnative native:compile"
          ls -alh target/
          echo ${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}
          mkdir artifact
          cp target/${{ env.ARTIFACT_ID }} artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}-musl
          cp target/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}.jar artifact/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}-musl.jar
          ls -lah artifact/
          sudo apt update && sudo apt install -y xz-utils upx zlib1g-dev
          if [[ ! "$OS_NAME" =~ windows ]]; then
            chmod +x artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}-musl
          fi
          upx --best --lzma --all-filters artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}-musl
          docker build -f DockerfileStatic --build-arg APP_FILE=./artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}-musl -t "${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}-musl:$BUILD_DATETIME" .
          docker save "${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}-musl:$BUILD_DATETIME" | gzip > "artifact/${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}-musl_$BUILD_DATETIME.tar.gz"
          rm -rf pom-native.xml
      - name: Upload Native Executable ${{ matrix.java }} -musl
        uses: actions/upload-artifact@v4
        with: # name ‰∏çÂêåÂíåÂÖ∂‰ªñjobÈáçÂ§çÔºåÂêçÂ≠óÁõ∏ÂêåÂêåÊó∂ËøêË°å‰ºöÊä•Èîô
          name: artifact-${{ env.ARTIFACT_ID }}-${{ env.OS_CLASSIFIER }}-${{ env.OS_ARCH }}-musl
          path: artifact/*
  deploy-releases:
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    needs: [build-matrix-os,build-matrix-os-musl]
    env:
      BUILD_DATETIME: ${{ needs.build-matrix-os.outputs.build-time }}
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      # 1. Ê£ÄÂá∫‰ª£Á†Å
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Test
        run: |
          echo "Êú¨Ê¨°ÁºñËØëÊó∂Èó¥: $BUILD_DATETIME"
      # 2. ÊèêÂèñÈ°πÁõÆÂêçÂíåÁâàÊú¨
      - name: Extract Project Name and Version
        shell: bash
        run: |
          ARTIFACT_ID=$(mvn help:evaluate -q -DforceStdout -Dexpression=project.artifactId)
          echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
      # 3. ‰∏ãËΩΩÊâÄÊúâ Artifacts
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          pattern: artifact-${{ env.ARTIFACT_ID }}-*
          merge-multiple: true
      # 4. ÂàóÂá∫‰∏ãËΩΩÁöÑÊñá‰ª∂ÔºàË∞ÉËØïÔºâ
      - name: List Downloaded Files
        run: ls -lRh artifacts/
      - name: Generate SHA-256
        # run: for f in artifacts/*; do if [ -f "$f" ]; then shasum -a 256 "$f" > "$f.sha256"; echo "Generated SHA256 for $(basename "$f")"; fi; done
        # echo 'for f in artifacts/*; do [ -f "$f" ] && shasum -a 256 "$f" > "$f.sha256"; done' | bash
        #run: ÔΩú # find artifacts -maxdepth 1 -type f -exec sh -c 'shasum -a 256 "$1" > "$1.sha256"' _ {} \;
        run: |  # ‰øùÁïôÊç¢Ë°å
          for f in artifacts/*; do
            if [ -f "$f" ]; then
              shasum -a 256 "$f" > "$f.sha256"
              echo "Generated SHA256 for $(basename "$f")"
            fi
          done
          ls -lRh artifacts/
      - name: Extract current version changelog
        id: extract
        run: |
          TAG_NAME="${GITHUB_REF##*/}"  # ÊèêÂèñ tag ÂêçÁß∞ÔºåÂ¶Ç v1.2.3
          echo "Processing tag: $TAG_NAME"
          
          # Ê£ÄÊü• CHANGELOG.md ÊòØÂê¶Â≠òÂú®
          if [ ! -f "CHANGELOG.md" ]; then
            echo "CHANGELOG.md not found!"
            exit 1
          fi

          # Â¶ÇÊûú TAG_NAME ‰∏çÁ¨¶Âêà vX.Y.Z ‰∏îÊØèÊÆµÈÉΩÊòØ 1~8 ‰ΩçÊï∞Â≠óÔºåÂàôËÆæÁΩÆÈªòËÆ§ÂÄº
          if ! [[ "$TAG_NAME" =~ ^v[0-9]{1,8}\.[0-9]{1,8}\.[0-9]{1,8}$ ]]; then
            echo "Invalid TAG_NAME format: $TAG_NAME. Fallback to v1.2.3"
            TAG_NAME="v1.1.1"
          fi
          
          # Áî® awk Êà™ÂèñÂΩìÂâç tag ÁöÑ section Âà∞‰∏ã‰∏Ä‰∏™ tagÔºàÊàñÊñá‰ª∂Êú´Â∞æÔºâ ÂÆûÈôÖÊ†πÊçÆÊó•ÊúüÊù• v2025.0808.2351 
          awk -v tag="## ${TAG_NAME}" '
            BEGIN { found=0 }
            $0 ~ tag { found=1; next }
            /^## / && found { exit }
            found { content = content $0 "\n" }
            END { 
              if (found) {
                # ÁßªÈô§Êú´Â∞æÂ§ö‰ΩôÁöÑÊç¢Ë°åÁ¨¶
                gsub(/\n+$/, "", content)
                print content
              } else {
                print "No changelog found for " tag
                exit 1
              }
            }
          ' CHANGELOG.md > current-changelog.md
          
          # Ê£ÄÊü•ÊòØÂê¶ÊàêÂäüÊèêÂèñÂÜÖÂÆπ
          if [ ! -s current-changelog.md ]; then
            echo "No changelog content found for $TAG_NAME"
            echo "Available sections in CHANGELOG.md:"
            grep "^## " CHANGELOG.md || echo "No sections found"
            exit 1
          fi
          
          echo "Successfully extracted changelog:"
          echo "----------------------------------------"
          cat current-changelog.md
          echo "----------------------------------------"
          # ‰øùÂ≠òÂà∞ GITHUB_OUTPUT ‰æõÂêéÁª≠ step ‰ΩøÁî®
          {
            echo "BODY<<EOF"
            cat current-changelog.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
          # ‰πü‰øùÂ≠ò tag ÂêçÁß∞‰æõÂêéÁª≠‰ΩøÁî®
          # echo "TAG_NAME=$TAG_NAME" >> "$GITHUB_OUTPUT"
      # 5. ÂàõÂª∫ GitHub Release Âπ∂‰∏ä‰º† Artifacts
      - name: Create Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        #if: startsWith(github.ref, 'refs/tags/') # ‰ªÖÂú®tagÊó∂‰∏ä‰º†
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          make_latest: true # ÊåáÂÆöÊòØÂê¶Â∞ÜÊ≠§ÁâàÊú¨ËÆæÁΩÆ‰∏∫‰ªìÂ∫ìÁöÑÊúÄÊñ∞ÁâàÊú¨„ÄÇËçâÁ®øÁâàÂíåÈ¢ÑÂèëÂ∏ÉÁâà‰∏çËÉΩËÆæÁΩÆ‰∏∫ÊúÄÊñ∞ÁâàÊú¨„ÄÇÂèØ‰ª•ÊòØtrue„ÄÅfalseÊàñlegacy„ÄÇ
          draft: false # ÊåáÁ§∫Ê≠§ÁâàÊú¨ÊòØÂê¶‰∏∫ËçâÁ®ø
          prerelease: false # ÊòØÂê¶‰∏∫È¢ÑÂèëÂ∏ÉÁâàÊú¨
          preserve_order: true # ÊåáÁ§∫‰∏ä‰º†ËµÑ‰∫ßÊó∂ÊòØÂê¶Â∫î‰øùÁïôÊñá‰ª∂È°∫Â∫è
          body: ${{ steps.extract.outputs.BODY }}
          files: |
            artifacts/*
        # env:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}